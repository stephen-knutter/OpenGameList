{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getById","id","Error","url","get","map","response","json","catch","handleError","getLatest","num","getMostViewed","getRandom","res","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","http_1","Http"],"mappings":"26BAMaA,YAAW,WACpB,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,aA0CtB,MAxCIH,aAAAI,UAAAC,QAAA,SAAQC,IACJ,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,iBAClC,IAAIC,KAAMN,KAAKC,QAAUG,EACzB,OAAOJ,MAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAW,UAAA,SAAUC,KACN,GAAIR,KAAMN,KAAKC,QAAU,YAEzB,OADW,OAAPa,MAAeR,KAAOQ,KACnBd,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAa,cAAA,SAAcD,KACV,GAAIR,KAAMN,KAAKC,QAAU,gBAEzB,OADW,OAAPa,MAAeR,KAAOQ,KACnBd,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAc,UAAA,SAAUZ,IACN,GAAIE,KAAMN,KAAKC,QAAU,YAEzB,OADIG,MAAME,KAAOF,IACVJ,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SACrBC,MAAMX,KAAKY,cAGZd,YAAAI,UAAAU,YAAR,SAAoBM,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMR,OAAOQ,OAAS,iBAEtDpB,eA7CaA,YAAWyB,YADvBC,OAAAC,6CAE6BC,OAAAC,QADjB7B","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Item } from \"./item\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(private http: Http) { }\r\n\r\n    private baseUrl = \"api/items/\"; // web api URL\r\n\r\n    getById(id: number) {\r\n        if (id == null) { throw new Error(\"id is required\"); }\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve latest items.\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) { url += num }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetMostViewed/{n} Web API method to retrieve the most viewed items.\r\n    getMostViewed(num?: number) {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) { url += num }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetRandom/{n} Web API method to retrieve n random items.\r\n    getRandom(id?: number) {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n        if (id) { url += id; }\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}