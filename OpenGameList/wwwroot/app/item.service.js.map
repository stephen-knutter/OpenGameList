{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getById","id","Error","url","get","map","response","json","catch","handleError","getLatest","num","getMostViewed","getRandom","res","add","item","post","JSON","stringify","getRequestOptions","update","Id","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","auth_http_1","AuthHttp"],"mappings":"w/BAOaA,YAAW,WAIpB,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAFZC,KAAAC,QAAU,aAqFtB,MAjFIH,aAAAI,UAAAC,QAAA,SAAQC,IACJ,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,iBAClC,IAAIC,KAAMN,KAAKC,QAAUG,EACzB,OAAOJ,MAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAW,UAAA,SAAUC,KACN,GAAIR,KAAMN,KAAKC,QAAU,YAEzB,OADW,OAAPa,MAAeR,KAAOQ,KACnBd,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAa,cAAA,SAAcD,KACV,GAAIR,KAAMN,KAAKC,QAAU,gBAEzB,OADW,OAAPa,MAAeR,KAAOQ,KACnBd,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAc,UAAA,SAAUZ,IACN,GAAIE,KAAMN,KAAKC,QAAU,YAEzB,OADIG,MAAME,KAAOF,IACVJ,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SACrBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAK,IAAA,SAAIH,IACA,GAAU,MAANA,GAAY,KAAM,IAAIC,OAAM,iBAChC,IAAIC,KAAMN,KAAKC,QAAUG,EACzB,OAAOJ,MAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SACrBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAgB,IAAA,SAAIC,MACA,GAAIb,KAAMN,KAAKC,OACf,OAAOD,MAAKD,KAAKqB,KAAKd,IAAKe,KAAKC,UAAUH,MAAOnB,KAAKuB,qBACjDf,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAsB,OAAA,SAAOL,MACH,GAAIb,KAAMN,KAAKC,QAAUkB,KAAKM,EAC9B,OAAOzB,MAAKD,KAAK2B,IAAIpB,IAAKe,KAAKC,UAAUH,MAAOnB,KAAKuB,qBAChDf,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAIpBd,YAAAI,UAAAyB,OAAA,SAAOvB,IACH,GAAIE,KAAMN,KAAKC,QAAUG,EACzB,OAAOJ,MAAKD,KAAK4B,OAAOrB,KACnBK,MAAMX,KAAKY,cAIZd,YAAAI,UAAAqB,kBAAR,WACI,MAAO,IAAIK,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAKpBlC,YAAAI,UAAAU,YAAR,SAAoBqB,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMvB,OAAOuB,OAAS,iBAEtDnC,eAvFaA,YAAWwC,YADvBC,OAAAC,6CAK6BC,YAAAC,YAJjB5C","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Item } from \"./item\";\r\nimport { AuthHttp } from \"./auth.http\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    // private Data: { Latest: Item[], MostViewed: Item[], Random: Item[] };\r\n    private baseUrl = \"api/items/\"; // web api URL\r\n\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    getById(id: number) {\r\n        if (id == null) { throw new Error(\"id is required\"); }\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve latest items.\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) { url += num }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetMostViewed/{n} Web API method to retrieve the most viewed items.\r\n    getMostViewed(num?: number) {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) { url += num }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetRandom/{n} Web API method to retrieve n random items.\r\n    getRandom(id?: number) {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n        if (id) { url += id; }\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\r\n    get(id: number) {\r\n        if (id == null) throw new Error(\"id is required\");\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [POST] /api/items/ Web API method to add a new item.\r\n    add(item: Item) {\r\n        var url = this.baseUrl;\r\n        return this.http.post(url, JSON.stringify(item), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [PUT] /api/items/{id} Web API method to update an existing item.\r\n    update(item: Item) {\r\n        var url = this.baseUrl + item.Id;\r\n        return this.http.put(url, JSON.stringify(item), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\r\n    delete(id: number) {\r\n        var url = this.baseUrl + id;\r\n        return this.http.delete(url)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // returns a viable RequestOptions object to handle Json requests\r\n    private getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        });\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}